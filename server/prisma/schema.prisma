generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    BASIC
    ADMIN
}

enum Language {
    ENGLISH
    RUSSIAN
}

model User {
    id          String       @id @default(uuid())
    name        String
    username    String       @unique
    email       String       @unique
    password    String
    role        Role         @default(BASIC)
    language    Language     @default(ENGLISH)
    collections Collection[] @relation("collections")
    comments    Comment[]    @relation("commentAuthor")
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    @@index([username])
}

model Collection {
    id          String @id @default(uuid())
    name        String
    description String
    author      User   @relation("collections", fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    topic       Topic  @relation("topic", fields: [topicId], references: [id], onDelete: Cascade)
    topicId     String
    items       Item[] @relation("items")

    customIntFieldName1  String?
    customIntFieldName2  String?
    customIntFieldName3  String?
    customStrFieldName1  String?
    customStrFieldName2  String?
    customStrFieldName3  String?
    customBoolFieldName1 String?
    customBoolFieldName2 String?
    customBoolFieldName3 String?
    customDateFieldName1 String?
    customDateFieldName2 String?
    customDateFieldName3 String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, description])
}

model Topic {
    id         String       @id @default(uuid())
    name       String       @unique
    collection Collection[] @relation("topic")

    @@index([name])
}

model Item {
    id           String     @id @default(uuid())
    name         String
    description  String
    collection   Collection @relation("items", fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId String
    tags         Tag[]      @relation("itemTags")
    comments     Comment[]  @relation("commentsItem")

    customIntField1  Int?
    customIntField2  Int?
    customIntField3  Int?
    customStrField1  String?
    customStrField2  String?
    customStrField3  String?
    customBoolField1 Boolean?
    customBoolField2 Boolean?
    customBoolField3 Boolean?
    customDateField1 DateTime?
    customDateField2 DateTime?
    customDateField3 DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id     String @id @default(uuid())
    name   String
    item   Item   @relation("itemTags", fields: [itemId], references: [id], onDelete: Cascade)
    itemId String

    @@index([name])
}

model Comment {
    id        String    @id @default(uuid())
    content   String
    author    User      @relation("commentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    item      Item      @relation("commentsItem", fields: [itemId], references: [id], onDelete: Cascade)
    itemId    String
    parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
    children  Comment[] @relation("ParentChild")
    parentId  String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}
